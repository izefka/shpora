import React from "react";

function Memo() {
  return (
    <>
      <h2>React.memo</h2>
      <p>Установка: npm install react-router-dom</p>
      <p>
        В React имеется своя система маршрутизации, которая позволяет
        сопоставлять запросы к приложению с определенными компонентами. Ключевым
        звеном в работе маршрутизации является модуль react-router, который
        содержит основной функционал по работе с маршрутизацией. Однако если мы
        собираемся работать в браузере, то нам также надо использовать модуль
        react-router-dom, а также history.
      </p>
      <pre>
        <code>{`<BrowserRouter>
    <Routes>
      <Route path="/" element={<App />}>
        <Route index element={<Home />} />
        <Route path="teams" element={<Teams />}>
          <Route path=":teamId" element={<Team />} />
          <Route path="new" element={<NewTeamForm />} />
          <Route index element={<LeagueStandings />} />
        </Route>
      </Route>
    </Routes>
  </BrowserRouter>`}</code>
      </pre>
      <p>
        Router определяет набор маршрутов и, когда к приложению, приходит
        запрос, то Router выполняет сопоставление запроса с маршрутами. И если
        какой-то маршрут совпадает с URL запроса, то этот маршрут выбирается для
        обработки запроса.
      </p>
      <p>
        И также для выбора маршрута определен объект Routes. Он содержит набор
        маршрутов и позволяет выбрать первый попавшийся маршрут и его
        использовать для обработки.
      </p>
      <p> Каждый маршрут представляет объект Route. Он имеет ряд атрибутов.</p>
      <p>
        Путь в виде звездочки - "*" указывает, что этот маршрут будет
        сопоставляться со всеми адресами URL, которые не соответствуют
        предыдущим маршрутам.{" "}
      </p>
      <p>
        Для создания ссылки применяется объект NavLink, который определен в
        модуле react-router-dom. Этот объект во многом аналогичен Link за тем
        исключением, что позволяет использовать состояние ссылки. В частности, с
        помощью атрибутов className и style можно установить стиль активной
        ссылки.
      </p>
      <pre>
        <code>{`<NavLink to="/" style={({ isActive }) =>({color: isActive ? 'green' : 'blue'})}>Главная</NavLink>`}</code>
      </pre>
    </>
  );
}

export default Memo;
